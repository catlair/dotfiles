{
  "Strict mode": {
    "prefix": "us",
    "body": "'use strict';",
    "description": "严格模式"
  },
  "Console.log": {
    "prefix": "cl",
    "body": ["console.log($0);"],
    "description": "打印日志"
  },
  "console.error": {
    "prefix": "ce",
    "body": ["console.error($1);$0"],
    "description": "打印错误"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn(${0});",
    "description": "打印警告"
  },
  "console.log 占位符": {
    "prefix": "cll",
    "body": "console.log('%${1:c}', ${0});",
    "description": "console.log 占位符"
  },
  "document.write": {
    "prefix": "dw",
    "body": ["document.write(${0});"],
    "description": "向文档写入"
  },
  // 声明定义
  //var
  "var statement": {
    "prefix": "v",
    "body": ["var ${0}"],
    "description": "var 声明"
  },
  "var assignment": {
    "prefix": ["v=", "va"],
    "body": ["var ${1:name} = ${2:value};"],
    "description": "var 赋值"
  },
  //let
  "let statement": {
    "prefix": "l",
    "body": "let ${0}",
    "description": "let 声明"
  },
  "let assignment": {
    "prefix": "l=",
    "body": "let ${1:name} = ${2:value};",
    "description": "let 赋值"
  },
  "destructuring let assignment": {
    "prefix": "dl=",
    "body": "let {${1:name}} = ${2:value};",
    "description": "destructuring let assignment"
  },
  //const
  "const assignment": {
    "prefix": "co",
    "body": "const ${1:name} = ${2:value};",
    "description": "const 声明"
  },
  "destructuring const assignment": {
    "prefix": "dco=",
    "body": "const {${1:name}} = ${2:value};",
    "description": "destructuring const assignment"
  },
  //控制
  //if判断语句
  "if statement": {
    "prefix": ["if"],
    "body": "if (${1:condition}) {\n\t${0}\n}",
    "description": "if statement"
  },
  "else statement": {
    "prefix": "el",
    "body": "else {\n\t${0}\n}",
    "description": "else statement"
  },
  "if/else statement": {
    "prefix": "ife",
    "body": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}",
    "description": "if/else statement"
  },
  "else if statement": {
    "prefix": "ei",
    "body": "else if (${1:condition}) {\n\t${0}\n}",
    "description": "else if statement"
  },
  //三目运算符
  "ternary operator": {
    "prefix": "ter",
    "body": "${1:condition} ? ${2:expression} : ${3:expression};",
    "description": "三目运算"
  },
  //while循环
  "while loop": {
    "prefix": "wl",
    "body": "while (${1:true}) {\n\t${0}\n}",
    "description": "while 循环"
  },
  //for循环
  "for loop": {
    "prefix": "fl",
    "body": "for (let ${1:i} = 0; ${1:i} < ${2:iterable}.length; ${1:i}++) {\n\t${0}\n}",
    "description": "for 循环"
  },
  "for loop var": {
    "prefix": "flv",
    "body": "for (var ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}",
    "description": "for 循环"
  },
  "reverse for loop": {
    "prefix": "rfl",
    "body": "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}",
    "description": "倒序for循环"
  },
  "for": {
    "prefix": "fr",
    "body": "for (${1|let,var|} ${2:i} = 0; ${2:i} < ${3:len}; ${2:i}++) {\n\t${0}\n}",
    "description": "简单for循环"
  },
  "for in loop": {
    "prefix": "fi",
    "body": "for (let ${1:key} in ${2:object}) {\n\tif (${2:object}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}",
    "description": "for in 循环"
  },
  "for of loop (ES6)": {
    "prefix": "fo",
    "body": "for (${1|let,const|} ${2:key} of ${3:array}) {\n\t${0}\n}",
    "description": "for of 循环 (ES6)"
  },
  //异常处理
  "try/catch": {
    "prefix": "tc",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}",
    "description": "try/catch"
  },
  "try/finally": {
    "prefix": "tf",
    "body": "try {\n\t${0}\n} finally {\n\t\n}",
    "description": "try/finally"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}",
    "description": "try/catch/finally"
  },
  //选择语句
  "switch case": {
    "prefix": "sw",
    "body": "switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}",
    "description": "switch case"
  },
  // Functions
  "function": {
    "prefix": "fu",
    "body": ["function(){", "\t$0", "}"],
    "description": " function"
  },
  "自定义function": {
    "prefix": "fun",
    "body": ["function ${1:funName}() {", "\t$0", "}"],
    "description": "自定义function"
  },
  "自定义function表达式": {
    "prefix": "fu=",
    "body": ["function ($1){", "\t$0", "}"],
    "description": "自定义function"
  },
  "Immediately Invoked Function Expression": {
    "prefix": "iife",
    "body": ["(function ($1){", "  $0", "}($2))"],
    "description": "立即执行函数"
  },
  "异步立即执行函数": {
    "prefix": "aiife",
    "body": ["(async () => {", "\t$0", "})();"],
    "description": ""
  },
  "function apply": {
    "prefix": "fa",
    "body": "${1:fn}.apply(${2:this}, ${3:arguments})",
    "description": "function apply"
  },
  "function call": {
    "prefix": "fc",
    "body": "${1:fn}.call(${2:this}, ${3:arguments})",
    "description": "function call"
  },
  "function bind": {
    "prefix": "fb",
    "body": "${1:fn}.bind(${2:this}, ${3:arguments})",
    "description": "function bind"
  },
  "arrow function (ES6)": {
    "prefix": "af",
    "body": "($1) => ${2:statement}",
    "description": "arrow function 箭头函数 (ES6)"
  },
  "arrow function with body (ES6)": {
    "prefix": "afb",
    "body": "(${1:arguments}) => {\n\t${0}\n}",
    "description": "带body的箭头函数 (ES6)"
  },
  "generator function (ES6)": {
    "prefix": "gf",
    "body": "function* (${1:arguments}) {\n\t${0}\n}",
    "description": "generator function 生成器函数[匿名] (ES6)"
  },
  "named generator function (ES6)": {
    "prefix": "gfn",
    "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}",
    "description": "生成器函数[具名] (ES6)"
  },
  //类型
  "typeof": {
    "prefix": "tof",
    "body": "typeof ${1:source} === '${2:undefined}'",
    "description": "typeof"
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${2:Object}",
    "description": "instanceof"
  },
  //定时器
  "setTimeout": {
    "prefix": "st",
    "body": "setTimeout(() => {\n\t${0}\n}, ${1:delay});",
    "description": "setTimeout"
  },
  "setInterval": {
    "prefix": "si",
    "body": "setInterval(() => {\n\t${0}\n}, ${1:delay});",
    "description": "setInterval"
  },
  // return 返回值
  "return": {
    "prefix": "r",
    "body": "return ${0};",
    "description": "return 返回值"
  },
  "return Promise (ES6)": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n});",
    "description": "return Promise (ES6)"
  },
  "return complex value (such as JSX components)": {
    "prefix": "rc",
    "body": "return (\n\t${0}\n);",
    "description": "返回复杂值 (例如JSX组件)"
  },
  //类和对象以及原型
  "prototypal constructor": {
    "prefix": "pctor",
    "body": "var ${1:Class} = function(${2:arguments}) {\n\t${0}\n};",
    "description": "prototypal constructor 函数表达式"
  },
  "prototype method": {
    "prefix": "proto",
    "body": "${1:Class}.prototype.${2:method} = function(${3:arguments}) {\n\t${0}\n};",
    "description": "prototype method"
  },
  //迭代
  "forEach loop": {
    "prefix": "fe",
    "body": "${1}.forEach((${2:item}) => {\n\t${0}\n});",
    "description": "forEach loop"
  },
  "map": {
    "prefix": "map",
    "body": "${1}.map((${2:item}) => {\n\t${0}\n});",
    "description": "map"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});",
    "description": "reduce"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1}.filter(${2:item} => {\n\t${0}\n});",
    "description": "filter"
  },
  "find": {
    "prefix": "find",
    "body": "${1}.find(${2:item} => {\n\t${0}\n});",
    "description": "find"
  },
  // ES6 Modules
  "export (ES6)": {
    "prefix": "ex",
    "body": "export ${1:member};",
    "description": "export (ES6)"
  },
  "export default (ES6)": {
    "prefix": "exd",
    "body": "export default ${1:member};",
    "description": "export default (ES6)"
  },
  "import module (ES6)": {
    "prefix": "im",
    "body": "import ${1:*} from '${2:module}';",
    "description": "import module (ES6)"
  },
  "import module as (ES6)": {
    "prefix": "ima",
    "body": "import ${1:*} as ${2:name} from '${3:module}';",
    "description": "import module as (ES6)"
  },
  // Node.js
  "Node.js style callback": {
    "prefix": "cb",
    "body": "(err, ${1:value}) => {${0}}",
    "description": "Node.js style callback"
  },
  "require": {
    "prefix": "re",
    "body": "require('${1:module}');",
    "description": "require"
  },
  "require local": {
    "prefix": "rel",
    "body": "require('./${1:module}');",
    "description": "require local"
  },
  "require assignment": {
    "prefix": "req",
    "body": "const ${1:module} = require('${1:module}');",
    "description": "require assignment"
  },
  "require assignment local": {
    "prefix": "reql",
    "body": "const ${1:module} = require('./${1:module}');",
    "description": "require assignment local"
  },
  "destructuring require assignment": {
    "prefix": "dreq",
    "body": "const {${1:module}} = require('${1:module}');",
    "description": "destructuring require assignment"
  },
  "destructuring require assignment local": {
    "prefix": "dreql",
    "body": "const {${1:module}} = require('./${1:module}');",
    "description": "destructuring require assignment local"
  },
  "exports.member": {
    "prefix": "em",
    "body": "exports.${1:member} = ${2:value};",
    "description": "exports.member"
  },
  "module.exports": {
    "prefix": "me",
    "body": "module.exports = ${1:name};",
    "description": "module.exports"
  },
  "module exports object": {
    "prefix": "meo",
    "body": "module.exports = {\n\t${1:member}\n};",
    "description": "module exports object"
  },
  "event handler": {
    "prefix": "on",
    "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});",
    "description": "event handler"
  },
  // Objects and Classes
  "object literal": {
    "prefix": "ol",
    "body": "{\n\tkv${0}\n};",
    "description": "object literal"
  },
  "same-line object literal": {
    "prefix": "slol",
    "body": "{ kv${0} };",
    "description": "same-line object literal"
  },
  "key/value pair": {
    "prefix": "kv",
    "body": "${1:key}: ${2:value},",
    "description": "key/value pair"
  },
  "class (ES6)": {
    "prefix": "cls",
    "body": "class ${1:name} {\n\tconstructor(${2:arguments}) {\n\t\t${0}\n\t}\n}",
    "description": "class (ES6)"
  },
  "child class (ES6)": {
    "prefix": "cex",
    "body": "class ${1:name} extends ${2:base} {\n\tconstructor(${3:arguments}) {\n\t\tsuper(${3:arguments});\n\t\t${0}\n\t}\n}",
    "description": "child class (ES6)"
  },
  "class constructor (ES6)": {
    "prefix": "ctor",
    "body": "constructor(${1:arguments}) {\n\tsuper(${1:arguments});${0}\n}",
    "description": "class constructor (ES6)"
  },
  "method (ES6 syntax)": {
    "prefix": "m",
    "body": "${1:method}(${2:arguments}) {\n\t${0}\n}",
    "description": "method (ES6 syntax)"
  },
  "getter (ES6 syntax)": {
    "prefix": "get",
    "body": "get ${1:property}() {\n\t${0}\n}",
    "description": "getter (ES6 syntax)"
  },
  "setter (ES6 syntax)": {
    "prefix": "set",
    "body": "set ${1:property}(${2:value}) {\n\t${0}\n}",
    "description": "setter (ES6 syntax)"
  },
  "getter and setter (ES6 syntax)": {
    "prefix": "gs",
    "body": "get ${1:property}() {\n\t${0}\n}\nset ${1:property}(${2:value}) {\n\t\n}",
    "description": "getter and setter (ES6 syntax)"
  },
  "Object.assign": {
    "prefix": "oa",
    "body": "Object.assign(${1:dest}, ${2:source})",
    "description": "Object.assign"
  },
  "Object.assign copy (shallow clone)": {
    "prefix": "oc",
    "body": "Object.assign({}, ${1:original}, ${2:source})",
    "description": "Object.assign copy (shallow clone)"
  },
  // Promises
  "Promise (ES6)": {
    "prefix": "pr",
    "body": "new Promise((resolve, reject) => {\n\t${0}\n})",
    "description": "Promise (ES6)"
  },
  "Promise.then": {
    "prefix": "then",
    "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})",
    "description": "Promise.then"
  },
  "Promise.catch": {
    "prefix": "catch",
    "body": "${1:promise}.catch((${2:err}) => {\n\t${0}\n})",
    "description": "Promise.catch"
  },
  // Iterables
  "sequence of 0..n": {
    "prefix": "seq",
    "body": "[...Array(${1:length}).keys()]${0}",
    "description": "sequence of 0..n"
  },
  /* BDD Testing //Mocha, Jasmine, etc*/
  "describe": {
    "prefix": "desc",
    "body": "describe('${1:description}', () => {\n\t${0}\n});",
    "description": "describe"
  },
  "context": {
    "prefix": "cont",
    "body": "context('${1:description}', () => {\n\t${0}\n});",
    "description": "context"
  },
  "it": {
    "prefix": "it",
    "body": "it('${1:description}', () => {\n\t${0}\n});",
    "description": "it"
  },
  "it synchronous": {
    "prefix": "its",
    "body": "it('${1:description}', () => {\n\t${0}\n});",
    "description": "it synchronous"
  },
  "it asynchronous": {
    "prefix": "ita",
    "body": "it('${1:description}', (done) => {\n\t${0}\n\tdone();\n});",
    "description": "it asynchronous"
  },
  "before test suite": {
    "prefix": "bf",
    "body": "before(() => {\n\t${0}\n});",
    "description": "before test suite"
  },
  "before each test": {
    "prefix": "bfe",
    "body": "beforeEach(() => {\n\t${0}\n});",
    "description": "before each test"
  },
  "after test suite": {
    "prefix": "aft",
    "body": "after(() => {\n\t${0}\n});",
    "description": "after test suite"
  },
  "after each test": {
    "prefix": "afe",
    "body": "afterEach(() => {\n\t${0}\n});",
    "description": "after each test"
  },
  "setImmediate": {
    "prefix": "sim",
    "body": "setImmediate(() => {\n\t${0}\n});",
    "description": "setImmediate"
  },
  "process nextTick": {
    "prefix": "nt",
    "body": "process.nextTick(() => {\n\t${0}\n});",
    "description": "process nextTick"
  }
}
